/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.40).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.BenRegistrationApplication;
import io.swagger.model.ESignRequestObject;
import io.swagger.resources.BenRegistrationApplicationResource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-02-14T07:07:34.520234324Z[GMT]")
@Validated

public interface BenRegistrationApplicationResourceApi {


	   @Operation(summary = "Post BenRegistrationApplication", description = "Get BenRegistrationApplication to the database", tags={ "BenRegistrationApplication" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BenRegistrationApplicationResource.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Input"),
        
        @ApiResponse(responseCode = "405", description = "Invalid input"),
        
        @ApiResponse(responseCode = "422", description = "Unporcessable Entity"),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/ben_registration_applications/{id}/:submit",
        produces = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<BenRegistrationApplicationResource> benRegistrationApplication(@Parameter(in = ParameterIn.PATH, description = "Post detail of beneficiary", required=true, schema=@Schema()) @PathVariable("id") Long id);

    

  @Operation(summary = "ESign BenRegistrationApplication", description = "ESign BenRegistrationApplication ", tags={ "BenRegistrationApplication" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BenRegistrationApplicationResource.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Input"),
        
        @ApiResponse(responseCode = "405", description = "Invalid input"),
        
        @ApiResponse(responseCode = "422", description = "Unporcessable Entity"),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/ben_registration_applications/{application_id}/esign",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ESignRequestObject> eSignBenRegistrationApplication(@Parameter(in = ParameterIn.PATH, description = "application id ", required=false, schema=@Schema()) @PathVariable("application_id") Long applicationId);
    


    @Operation(summary = "BenRegistrationApplication ESign Response processor ", description = "ESign Response processor  ", tags={ "BenRegistrationApplication" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BenRegistrationApplicationResource.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Input"),
        
        @ApiResponse(responseCode = "405", description = "Invalid input"),
        
        @ApiResponse(responseCode = "422", description = "Unporcessable Entity"),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/ben_registration_applications/{application_id}/esignresponse",
        produces = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ESignRequestObject> eSignResponsebenRegistrationApplication(@Parameter(in = ParameterIn.PATH, description = "application id ", required=false, schema=@Schema()) @PathVariable("application_id") Long applicationId,@RequestParam(value = "respon", required = false) String respon);
    


    
    @Operation(summary = "beneficiary", description = "", tags={ "BenRegistrationApplication" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BenRegistrationApplicationResource.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Input"),
        
        @ApiResponse(responseCode = "405", description = "Invalid input"),
        
        @ApiResponse(responseCode = "422", description = "Unporcessable Entity"),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/ben_registration_application/{id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<BenRegistrationApplicationResource> get(@Parameter(in = ParameterIn.PATH, description = "GEt details of primary card holder", required=false, schema=@Schema()) @PathVariable("id") Long id);

    @Operation(summary = "Add BenRegistrationApplication", description = "Add BenRegistrationApplication to the database", tags={ "BenRegistrationApplication" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BenRegistrationApplicationResource.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Input"),
        
        @ApiResponse(responseCode = "405", description = "Invalid input"),
        
        @ApiResponse(responseCode = "422", description = "Unporcessable Entity"),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/ben_registration_applications",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<BenRegistrationApplicationResource> create(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody BenRegistrationApplicationResource body);


    @Operation(summary = "beneficiaryRegistration", description = "", tags={ "BenRegistrationApplication" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = BenRegistrationApplicationResource.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad Input"),
        
        @ApiResponse(responseCode = "405", description = "Invalid input"),
        
        @ApiResponse(responseCode = "422", description = "Unporcessable Entity"),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/ben_registration_applications",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<BenRegistrationApplicationResource>> list( HttpServletRequest request,@RequestParam("is_draft") boolean isDraft);
}
