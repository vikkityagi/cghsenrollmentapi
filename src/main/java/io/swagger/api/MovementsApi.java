/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.41).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ESignRequestObject;
import io.swagger.model.Movement;
import io.swagger.resources.MovementResource;
import io.swagger.resources.MovementResponseResource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-02-20T17:49:37.665755339Z[GMT]")
@Validated
public interface MovementsApi {

    @Operation(summary = "movement", description = "Add a movement", tags = { "Movement" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MovementResponseResource.class))),

            @ApiResponse(responseCode = "400", description = "Bad Input"),

            @ApiResponse(responseCode = "405", description = "Invalid input"),

            @ApiResponse(responseCode = "422", description = "Unporcessable Entity"),

            @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/movements", produces = { "application/json", "application/xml" }, consumes = {
            "application/json", "application/xml", "application/x-www-form-urlencoded" }, method = RequestMethod.POST)
    ResponseEntity<MovementResponseResource> create(HttpServletRequest request,@Parameter(in = ParameterIn.DEFAULT, description = "Create a new movement", required = true, schema = @Schema()) @Valid @RequestBody MovementResource body);


    // @Operation(summary = "movement", description = "this will provide filtered
    // data if there is any parameter present in the query string", tags={
    // "Movement" })
    // @ApiResponses(value = {
    // @ApiResponse(responseCode = "200", description = "Successful operation",
    // content = @Content(mediaType = "application/json", array =
    // @ArraySchema(schema = @Schema(implementation =
    // MovementResponseResource.class)))),
    // @ApiResponse(responseCode = "400", description = "Bad Input"),
    // @ApiResponse(responseCode = "405", description = "Invalid input"),
    // @ApiResponse(responseCode = "422", description = "Unporcessable Entity"),
    // @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    // @RequestMapping(value = "/movements",
    // produces = { "application/json", "application/xml" },
    // method = RequestMethod.GET)
    // ResponseEntity<List<MovementResponseResource>> list(@Parameter(in =
    // ParameterIn.QUERY, description = "fromUserId" ,schema=@Schema()) @Valid
    // @RequestParam(value = "from_user_id", required = false) Long fromUserId,
    // @Parameter(in = ParameterIn.QUERY, description = "toUserId"
    // ,schema=@Schema()) @Valid @RequestParam(value = "to_user_id", required =
    // false) Long toUserId);

    @Operation(summary = "tasklist", description = "this will provide tasklist for the user", tags = { "Movement" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = MovementResource.class)))),
            @ApiResponse(responseCode = "400", description = "Bad Input"),
            @ApiResponse(responseCode = "405", description = "Invalid input"),
            @ApiResponse(responseCode = "422", description = "Unporcessable Entity"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/movements/{user_id}/movements:tasklist", produces = { "application/json",
            "application/xml" }, method = RequestMethod.GET)
    ResponseEntity<List<MovementResource>> tasklist(
            @Parameter(in = ParameterIn.PATH, description = "toUserId", required = true, schema = @Schema()) @PathVariable("user_id") Long toUserId,@RequestParam(name="roleId") long roleId);

    @Operation(summary = "activitylist", description = "this will provide tasklist for the user", tags = { "Movement" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = MovementResponseResource.class)))),
            @ApiResponse(responseCode = "400", description = "Bad Input"),
            @ApiResponse(responseCode = "405", description = "Invalid input"),
            @ApiResponse(responseCode = "422", description = "Unporcessable Entity"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/parichay_user/{user_id}/movements:activitylist", produces = { "application/json",
            "application/xml" }, method = RequestMethod.GET)
    ResponseEntity<List<MovementResource>> activitylist(
            @Parameter(in = ParameterIn.PATH, description = "fromUserId", required = true, schema = @Schema()) @PathVariable("user_id") Long userId,@RequestParam("roleId") long roleId);

    @Operation(summary = "forward", description = "Forward the application", tags = { "Movement" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = MovementResponseResource.class)))),
            @ApiResponse(responseCode = "400", description = "Bad Input"),
            @ApiResponse(responseCode = "405", description = "Invalid input"),
            @ApiResponse(responseCode = "422", description = "Unporcessable Entity"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/movement/{id}/:forward", produces = { "application/json",
            "application/xml" }, method = RequestMethod.GET)
    ResponseEntity<MovementResponseResource> forward(
            @Parameter(in = ParameterIn.PATH, description = "movementId", required = true, schema = @Schema()) @PathVariable("id") Long movementId,@RequestParam("roleId") long roleId) throws Exception;




  @Operation(summary = "ESign Movement", description = "ESign Movement ", tags={ "Movement" })
  @ApiResponses(value = { 
      @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MovementResponseResource.class))),
      
      @ApiResponse(responseCode = "400", description = "Bad Input"),
      
      @ApiResponse(responseCode = "405", description = "Invalid input"),
      
      @ApiResponse(responseCode = "422", description = "Unporcessable Entity"),
      
      @ApiResponse(responseCode = "500", description = "Internal Server Error") })
  @RequestMapping(value = "/movement/{id}/esign",
      produces = { "application/json" },
      method = RequestMethod.GET)
  ResponseEntity<ESignRequestObject> eSignMovement(@Parameter(in = ParameterIn.PATH, description = "movement id ", required=false, schema=@Schema()) @PathVariable("id") Long id);

  @Operation(summary = "Movement ESign Response processor ", description = "ESign Response processor  ", tags={ "Movement" })
  @ApiResponses(value = { 
      @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MovementResponseResource.class))),
      
      @ApiResponse(responseCode = "400", description = "Bad Input"),
      
      @ApiResponse(responseCode = "405", description = "Invalid input"),
      
      @ApiResponse(responseCode = "422", description = "Unporcessable Entity"),
      
      @ApiResponse(responseCode = "500", description = "Internal Server Error") })
  @RequestMapping(value = "/movement/{id}/esignresponse",
      produces = { "application/json" },
      method = RequestMethod.POST)
  ResponseEntity<ESignRequestObject> eSignResponsebenRegistrationApplication(@Parameter(in = ParameterIn.PATH, description = "movement id ", required=false, schema=@Schema()) @PathVariable("id") Long id,@RequestParam(value = "respon", required = false) String respon);
  

}
