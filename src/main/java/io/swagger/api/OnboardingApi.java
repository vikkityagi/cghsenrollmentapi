/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;



import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import io.swagger.model.ESignRequestObject;
import io.swagger.model.ApplicationNodalOfficerDetail;
import io.swagger.model.OnboardingApplication;
import io.swagger.model.OnboardingValidationError;
import io.swagger.resources.NodalUserResource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
 
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-01-18T12:17:29.581Z[GMT]")
@Validated
@Service
@CrossOrigin
public interface OnboardingApi {

    @Operation(summary = "To create a new Onboarding Application", description = "To create a new Onboarding Application", tags={ "OnboardingApplication" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OnboardingApplication.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid data supplied"),
        
        @ApiResponse(responseCode = "405", description = "Validation exception", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OnboardingValidationError.class)))) })
    @RequestMapping(value = "/onboarding",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.POST)
    ResponseEntity<OnboardingApplication> create(@Parameter(in = ParameterIn.DEFAULT, description = "To create a new Onboarding Application", required=true, schema=@Schema()) @Valid @RequestBody OnboardingApplication onboardingApplicationDto) throws Exception;


    @Operation(summary = "To create a new Onboarding Application", description = "To create a new Onboarding Application", tags={ "OnboardingApplication" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OnboardingApplication.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid data supplied") })
    @RequestMapping(value = "/onboarding/{applicationId}",
       // produces = { "application/json"}, 
        //consumes = { "text/plain"}, 
        method = RequestMethod.GET)
    ResponseEntity<OnboardingApplication> getOnBoardingApplication
    (@PathVariable(value="applicationId") int applicationId,
    	    @RequestParam(value="fields", required=false) String[] fields);

    @Operation(summary = "To create a final Onboarding Application", description = "To create a final Onboarding Application", tags={ "OnboardingApplication" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OnboardingApplication.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid data supplied") })
    @RequestMapping(value = "/getapplications/{applicationId}",
       // produces = { "application/json"}, 
        //consumes = { "text/plain"}, 
        method = RequestMethod.GET)
    public long finalApplication
    (@PathVariable(value="applicationId") String applicationId);

            
	@Operation(summary = "ESign OnboardingApplication", description = "ESign OnboardingApplication ", tags={ "OnboardingApplication" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OnboardingApplication.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Input"),
        
        @ApiResponse(responseCode = "405", description = "Invalid input"),
        
        @ApiResponse(responseCode = "422", description = "Unporcessable Entity"),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/onboarding/{application_id}/esign",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ESignRequestObject> eSignOnboardingApplication(@Parameter(in = ParameterIn.PATH, description = "application id ", required=false, schema=@Schema()) @PathVariable("application_id") Long applicationId);
    


    @Operation(summary = "OnboardingApplication ESign Response processor ", description = "ESign Response processor  ", tags={ "OnboardingApplication" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OnboardingApplication.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Input"),
        
        @ApiResponse(responseCode = "405", description = "Invalid input"),
        
        @ApiResponse(responseCode = "422", description = "Unporcessable Entity"),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/onboarding/{application_id}/esignresponse",
        produces = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ESignRequestObject> eSignResponseOnboardingApplication(@Parameter(in = ParameterIn.PATH, description = "application id ", required=false, schema=@Schema()) @PathVariable("application_id") Long applicationId,@RequestParam(value = "respon", required = false) String respon);
    

    @Operation(summary = "List of OnboardingApplication", description = "List of OnboardingApplication", tags={ "OnboardingApplication" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OnboardingApplication.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Input"),
        
        @ApiResponse(responseCode = "405", description = "Invalid input"),
        
        @ApiResponse(responseCode = "422", description = "Unporcessable Entity"),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/OnboardingApplications",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<OnboardingApplication>> list();
    

}

